  * Write functionality to be triggered by User Sign Up button

=====Use cases==========
  Forgot Password Successful (Valid email)
    1) User enters his email in 'enter your email' input box
    2) User clicks 'Restore Password' button
    3) 'Password reset was sent to your email'

* Request list of groups that we don't have access to
   * Create extra logic call to get those groups

* Save/Update group

======================== Layout details =================================
Group Menu Screen - See screenshot I sent (Screenshot_2014-04-24)
1)User email is displayed on the top right
2)Group Name is top centered
4)User clicks Edit Group to view group details - lightbox view may be good here
5)Buttons for Classes related to the group appear on the left column on the screen - EQUIPMENT, Inventory.
When a button is clicked, the center portion of the screen displays a table of objects within the class that is related to the Group.
6)User can add a new object or view/edit existing object - use pop out lightbox for this.
7)In the right column, display a table of ACTIVITY class that lists all recent activity for the group.
==========================================================================

* Indicate if there are no my groups or no other groups

* Create layout for groups page
* Create popup functionality

Parse.com custom backend logic

* Add file uploading and saving file functionality:
    var fileUploadControl = $("#profilePhotoFileUpload")[0];
    if (fileUploadControl.files.length > 0) {
      var file = fileUploadControl.files[0];
      var name = "photo.jpg";

      var parseFile = new Parse.File(name, file);
    }


//recipe view
            recipeView:function (recipeId) {

                if (this.checkAuthorized()) {
                    this.loadView(new RecipeDetailView({'recipeId':recipeId}));
                }
            },

//*************

<script type="text/template" id="recipeDetailTemplate">
    <div class="container">

       <div class="panel panel-default">
  <div class="panel-heading">RECIPE DETAIL VIEW</div>
  <div class="panel-body">


        <form class="form-signin" role="form">
            <h2 class="form-signup-heading">Please fill equipment details:</h2>
            <input type="text" class="form-control" id="new-equipment-name" value="<%= recipe.NAME %>" placeholder="Name" required autofocus/>
            <input type="text" class="form-control" id="new-equipment-type" value="<%= recipe.Cook %>" placeholder="Type" required/>
        </form>

        <table class="table">
                <thead>
                <tr>

                    <h2>
                        <th colspan="2" style="text-align: center">Select a Recipe Category:</th>

                    </h2>
                </tr>
                </thead>

                <tbody>

                <% if (ingredients.length == 0) { %>
                <tr>
                    <td colspan="2" class="title"> No ingredients</td>
                </tr>
                <% } else { %>
                <!-- else begin -->
                <% _.each(ingredients, function(INGREDIENT) { %>
                <tr>
                    <td style="width: 80%">

                            <%= INGREDIENT.NAME %> <br/>

                    </td>

                </tr>
                <% }); %>

                <!-- end of else -->
                <% } %>

                </tbody>
            </table>
  </div>
</div>
    </div>
</script>





//*************


    var RecipeDetailView = Parse.View.extend({

        defaults:{
            recipeId:''
        },

        el:'#content',

        events:{

        },

        initialize:function (options) {
            _.bindAll(this, 'render');

            if (options.hasOwnProperty('recipeId')) {
                this.recipeId = options['recipeId'];
            }

            // retrieving ingredients for recipe
            this.ingredients = new IngredientsCollection();
            this.ingredients.bind('reset', this.render);
            this.ingredients.query = new Parse.Query(ingredients);

            if (this.recipeId && this.recipeId != '') {
                this.ingredients.query.equalTo("recipeId", this.recipeId);
            }

            // retrieving steps for recipe
            this.steps = new StepsCollection();
            this.steps.query = new Parse.Query(steps);
            this.steps.bind('reset', this.render);
            if (this.recipeId && this.recipeId != '') {
                this.steps.query.equalTo("recipeId", this.recipeId);
            }

            this.recipe = new recipe({'objectId':this.recipeId});

            var self = this;

            this.recipe.fetch({
                success:function () {
                    self.ingredients.fetch();
                    self.steps.fetch();
                },

                error:function () {
                    router.navigate('groups', true);
                }
            });

        },

        render:function () {
            $(this.el).html(_.template($('#recipeDetailTemplate').html(),
                {
                    'ingredients':this.ingredients.toJSON(),
                    'steps':this.steps.toJSON(),
                    'recipe':this.recipe.toJSON()
                })
            );
        },

        logout:function () {
            // logging out current user
            Parse.User.logOut();

            // getting back to login view
            router.navigate('', true);
        }

    });